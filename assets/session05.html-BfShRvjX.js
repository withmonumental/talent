import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c as a,b as e,e as t,d as n,a as r}from"./app-D7XL0ZiN.js";const p="/assets/THA_REST_WebAPI_v102-Bd_FLph6.jpg",c="/assets/THA_REST_WebAPI_v103-CxkX6MbO.jpg",u="/assets/THA_REST_WebAPI_v104-CyzLEpwQ.png",d="/assets/THA_REST_WebAPI_v105-ykN3-ArN.jpg",h="/assets/THA_REST_WebAPI_v107-DuqD1zln.png",g="/assets/THA_REST_WebAPI_v108-SjxBzKZy.png",m="/assets/THA_REST_WebAPI_v109-Bba0MXBn.png",f="/assets/THA_REST_WebAPI_v1010-C4Md-1_2.png",b="/assets/THA_REST_WebAPI_v1011-Bsvq76s9.png",_="/assets/THA_REST_WebAPI_v1012-DvkkvRXl.png",y="/assets/THA_REST_WebAPI_v1013-DaKp8Kyo.png",v="/assets/THA_REST_WebAPI_v104-CyzLEpwQ.png",x="/assets/THA_REST_WebAPI_v1015-R0vHp5ps.png",T="/assets/THA_REST_WebAPI_v1016-DL13z6-z.png",A="/assets/THA_REST_WebAPI_v1017-XGGMLKuT.png",S="/assets/THA_REST_WebAPI_v1018-CYgMwpQK.png",q="/assets/THA_REST_WebAPI_v1019-DnuZ69xc.png",R="/assets/THA_REST_WebAPI_v1020-D908CKk3.png",k="/assets/THA_REST_WebAPI_v1021-DXx96Kn1.png",E="/assets/THA_REST_WebAPI_v1022-DKZwyAMe.png",P="/assets/THA_REST_WebAPI_v104-CyzLEpwQ.png",w={},C=r('<h1 id="rest-et-web-api-s" tabindex="-1"><a class="header-anchor" href="#rest-et-web-api-s"><span>REST et Web API’s</span></a></h1><p>Le cours est disponible <a href="/pdf/THA_REST_WebAPI_v1.0.pdf">ICI</a></p><h2 id="approche-projet" tabindex="-1"><a class="header-anchor" href="#approche-projet"><span>Approche projet</span></a></h2><ul><li><span style="color:#5497B4;">Introduction</span></li><li><span style="color:#5497B4;">REST en théorie</span></li><li><span style="color:#5497B4;">REST en pratique</span></li><li><span style="color:#5497B4;">Web APIs</span></li><li><span style="color:#5497B4;">Conclusion</span></li><li><span style="color:#5497B4;">Questions</span></li></ul><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><h3 id="avant-les-services-web" tabindex="-1"><a class="header-anchor" href="#avant-les-services-web"><span><span style="color:#5497B4;"><strong>Avant : les Services Web</strong></span></span></a></h3><ul><li>Échange de services en Machine-to-Machine (M2M)</li><li>Notion d’ Architectures Orientées-Services (AOS)</li><li>Notions d’« orchestration » et de « chorégraphie » de services</li><li>Ensemble de technologies (SOAP, WSDL, UDDI, BPEL)</li></ul><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="caracteristiques-d-un-service-web" tabindex="-1"><a class="header-anchor" href="#caracteristiques-d-un-service-web"><span><span style="color:#5497B4;"><strong>Caractéristiques d’un service Web</strong></span></span></a></h3><ul><li>Permet l’échange de messages(documents) et non de pages Web <ul><li>XML, JSON…</li></ul></li><li>Expose une API (Clients AJAX, autres services) <ul><li>Ensemble d’opérations disponibles (verbes)</li></ul><ul><li>Ex : login, addUserToGroup, createReservation</li></ul></li><li>Utilise (ou pas) HTTP comme protocole de transport <ul><li>HTTP <ul><li><span style="color:#000000;">Uniquement des requêtes POST</span></li><li><span style="color:#000000;">Beaucoup de «redites»</span></li></ul></li><li>Autres : SMTP, TCP, UDP, JMS…</li></ul></li></ul><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="les-services-web-au-final" tabindex="-1"><a class="header-anchor" href="#les-services-web-au-final"><span><span style="color:#5497B4;"><strong>Les services Web : au final</strong></span></span></a></h3><p>Un mécanisme très puissant pour les applications Web complexes</p><ul><li><strong>Pas si «simple»</strong> <br> Redéploie toute une stack au-dessus de HTTP</li><li><strong>Pas si interopérable</strong> <br> Problèmes d’encodage, de (dé)sérialisation des messages dus aux implémentations des outils</li><li><strong>Pas si standard / réutilisable</strong><br> L’API d’un service dépend des choix de conception<br> Couplage fort entre fournisseur (serveur) et consommateur (client)</li><li><strong>Pas (du tout ?) scalable</strong><br> Pas de cache, mauvaises performances dues à la stack et à la bande passante importante</li></ul><div class="hint-container info"><p class="hint-container-title">En résumé</p><p>Perte des «bonnes propriétés» qui ont fait le succès du Web</p></div><ul><li></li></ul><h2 id="rest-en-theorie" tabindex="-1"><a class="header-anchor" href="#rest-en-theorie"><span>REST, en théorie</span></a></h2><div class="hint-container info"><p class="hint-container-title">Citation</p><p>&quot;La théorie, c &#39;est quand on sait tout et que rien ne fonctionne... &quot;</p></div><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Selon toute vraisemblance, ce portrait d’Albert Einstein serait en fait le résultat d’un étonnant concours de circonstances. Le 14 mars 1951, le physicien allemande fête en effet son 72ème anniversaire, à côté de l’université de Princeton, dans l’État du New Jersey.</p><p>Suivi durant toute cette journée par une cohorte de journalistes, le vieil homme est mitraillé de flashs provenant de nombreux appareils photos. Alors, par lassitude, celui qui voulait simplement fêter son anniversaire en compagnie de ses proches se retourne vers un des photographes… et tire ostensiblement la langue. Pris sur le vif, par un employé de l’agence de presse américaine «United Press International», le cliché est rapidement transmis à de nombreux journaux</p><h3 id="modele-de-maturite-de-richardson" tabindex="-1"><a class="header-anchor" href="#modele-de-maturite-de-richardson"><span><span style="color:#5497B4;"><strong>Modèle de maturité de Richardson</strong></span></span></a></h3>',22),I={href:"http://martinfowler.com/articles/richardsonMaturityModel.html",target:"_blank",rel:"noopener noreferrer"},L=e("p",null,[t("Le "),e("strong",null,"Modèle de Maturité de Richardson"),t(" permet de réduire, niveau par niveau, le couplage entre un client et un serveur REST en utilisant simplement et strictement ce qui fait le cœur du Web : les URIs, les verbes (méthodes) et codes retour HTTP, les liens (hypermédias).")],-1),W=e("p",null,[t("Atteindre le niveau 3 du MMR est la "),e("strong",null,"garantie"),t(" d’avoir d’ores et déjà un système d’information "),e("strong",null,"HATEOAS"),t(" , réellement Restful.")],-1),D=e("figure",null,[e("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),B={href:"https://architecturelogicielle.wordpress.com/2013/04/25/le-modele-de-maturite-de-richardson/",target:"_blank",rel:"noopener noreferrer"},H=r('<p>3 principes fondateurs du Web ont été soulignés :</p><ul><li>les URIs</li><li>le protocole HTTP</li><li>les hypermédias</li></ul><div class="hint-container info"><p class="hint-container-title">Info</p><p>Ces trois principes constituent précisément les trois niveaux de maturité du modèle de Leonard Richardson, le niveau 3 représentant l’objectif à atteindre pour parler d’un système d’information distribué réellement REST, ou Restful.</p></div><h3 id="style-architectural" tabindex="-1"><a class="header-anchor" href="#style-architectural"><span><span style="color:#5497B4;"><strong>Style architectural</strong></span></span></a></h3>',4),j={href:"http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm",target:"_blank",rel:"noopener noreferrer"},U=e("em",null,"Architectural Styles and the Design of Network - based Software Architectures",-1),M=e("br",null,null,-1),F=e("strong",null,"contraintes",-1),O=e("strong",null,"propriétés",-1),N=e("br",null,null,-1),z=e("p",null,"La question sous-jacente était d’identifier les contraintes à respecter dans le développement du Web:",-1),J=e("ul",null,[e("li",null,"pour conserver les propriétés ayant fait son succès,"),e("li",null,"pour corriger les problèmes constatés,"),e("li",null,"pour évaluer les évolutions futures des technologies.")],-1),G={href:"https://opikanoba.org/tr/fielding/rest/",target:"_blank",rel:"noopener noreferrer"},Q=r('<h3 id="objectifs" tabindex="-1"><a class="header-anchor" href="#objectifs"><span><span style="color:#5497B4;"><strong>Objectifs</strong></span></span></a></h3><div class="hint-container info"><p class="hint-container-title">Roy Fielding a écrit</p><p><strong>REST emphasizes</strong> «</p><ul><li>scalability of component interactions,</li><li>generality of interfaces,</li><li>independent deployment of components, and</li><li>intermediary components to <ul><li>reduce interaction latency,</li><li>enforce security, and</li><li>encapsulate legacy systems. »</li></ul></li></ul></div><h4 id="passage-a-l-echelle" tabindex="-1"><a class="header-anchor" href="#passage-a-l-echelle"><span><span style="color:#5497B4;"><strong>Passage à l’échelle</strong></span></span></a></h4><p><strong>Problème de performance</strong> La dimension et l’expansion constante du Web obligent à considérer dès le départ les problèmes d’échelle.</p><p><strong>Problème de robustesse</strong> Le système ne peut pas être 100% opérationnel 100% du temps.</p><div class="hint-container info"><p class="hint-container-title">Rappel</p><p>Le Web 1.0 se base sur :</p><ul><li>HyperText Markup Language</li><li>Hypertext Transfer Protocol : Verbes, codes de retour, media types, cache</li><li>Uniform Resource Locator : Ressource</li></ul></div><p><strong>Représentation d&#39;une transaction HTTP</strong></p><p>Schéma de représentation simple d&#39;une transaction<br><img src="'+h+'" alt="" loading="lazy"></p><p>Mais de nombreux composants sont en général à traverser<br><img src="'+g+'" alt="" loading="lazy"></p><p>Et l&#39;ensemble du web est plus complexe que la représentation initiale<br><img src="'+m+'" alt="" loading="lazy"></p><h4 id="generalite-des-interfaces" tabindex="-1"><a class="header-anchor" href="#generalite-des-interfaces"><span><span style="color:#5497B4;"><strong>Généralité des interfaces</strong></span></span></a></h4><p><strong>Facilite le développement des composants</strong> Réutilisation de bibliothèques standard, interopérabilité.</p><p><strong>Évolutivité</strong> Web de documents, Web de services, Web 2.0, Web des données, Web sémantique... Principle of partial understanding (Michael Hausenblas)</p><h4 id="deploiement-independant-des-composants" tabindex="-1"><a class="header-anchor" href="#deploiement-independant-des-composants"><span><span style="color:#5497B4;"><strong>Déploiement indépendant des composants</strong></span></span></a></h4><p><strong>Contrainte d’échelle</strong><br> Pas de centralisation possible sur le Web</p><p><strong>Adoption et évolution rapides</strong><br> Grassroot movement (poussé par le bas), « sélection naturelle », modèle du Bazar (Eric Raymond)</p><h4 id="composants-intermediaires" tabindex="-1"><a class="header-anchor" href="#composants-intermediaires"><span><span style="color:#5497B4;"><strong>Composants intermédiaires</strong></span></span></a></h4><p><span style="color:#3E4349;"><strong>Réduire la latence</strong></span></p><p><span style="color:#3E4349;">en conservant en cache le résultat de certaines requêtes (proxy),</span></p><p><span style="color:#3E4349;">en répartissant la charge entre plusieurs serveurs redondants (reverse proxy).</span></p><p><span style="color:#3E4349;"><strong>Assurer la sécurité</strong></span></p><p><span style="color:#3E4349;">en masquant l’accès à certains serveurs (proxy filtrant, reverse proxy, n-tiers).</span></p><p><span style="color:#3E4349;"><strong>Encapsulant des services</strong></span></p><p><span style="color:#3E4349;">en adaptant les requêtes (</span> <span style="color:#3E4349;">gateway</span> <span style="color:#3E4349;">) ← généralité des interfaces</span></p><h3 id="contraintes" tabindex="-1"><a class="header-anchor" href="#contraintes"><span><span style="color:#5497B4;"><strong>Contraintes</strong></span></span></a></h3><p>Les <em>contraintes</em> de REST selon Fielding sont les suivantes :</p><ul><li>Client-serveur</li><li>Connexion sans état (<em>stateless</em>)</li><li>Support des caches</li><li>Interface uniforme</li><li>Système en couches</li><li>Code à la demande (optionel)</li></ul><p>Nous allons aborder chacune de ces contraintes.</p><h4 id="client-serveur" tabindex="-1"><a class="header-anchor" href="#client-serveur"><span><strong>Client-serveur</strong></span></a></h4><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Separation of concern</strong> (Edsger W. Dikstra)<br></p><ol><li>Le <strong>serveur</strong> est responsable du stockage et de la cohérence des données (état des ressources).</li><li>Le <strong>client</strong> est responsable : <ul><li>de la présentation/du traitement des données,</li><li>de maintenir le contexte/état de l’interaction (cf. ci après).</li></ul></li></ol><div class="hint-container info"><p class="hint-container-title">Remarques</p><p>Cette séparation peut être appliquée, même si le client et le serveur sont sur le même machine. Certains composants sont à la fois client et serveur (e.g. proxy). Ils respectent cependant la séparation des préoccupations vis-à-vis des composants avec lesquels ils communiquent.</p></div><h4 id="systeme-en-couches" tabindex="-1"><a class="header-anchor" href="#systeme-en-couches"><span><span style="color:#5497B4;"><strong>Système en couches</strong></span></span></a></h4><p>Cette contrainte spécifie qu’un composant ne doit se soucier que de ses interlocuteurs directs. Le protocole HTTP assure lui même la cohérence des messages le long de la chaîne d’intérmédiaires en spécificiant, en fonction de leur sémantique, quelles parties d’une requête ou d’une réponse sont Hop-by-hop ou End-by-end. Ceci permet la mise en place de Composants intermédiaires.</p><div class="hint-container info"><p class="hint-container-title">Rappel</p><p>Les en-têtes de type end-to-end sont mis en cache et transférés par les proxy. Les éventuels en-têtes de type hop-by-hop ne sont pas mis en cache et ne sont pas transférés. De nouveaux en-têtes hop-by-hop peuvent être créés par le proxy.</p></div><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="support-des-caches" tabindex="-1"><a class="header-anchor" href="#support-des-caches"><span><span style="color:#5497B4;"><strong>Support des caches</strong></span></span></a></h4><p>Les verbes et les statuts pré-définis par HTTP ont une sémantique suffisamment précise pour informer les caches de la possibilité de « cacher » ou non un résultat. HTTP permet de contrôler plus finement le cache avec un certain nombres de champs d’en-tête (Cache-Control, Expires)<br><strong>NB: L’utilisation systématique de POST empêche l’exploitation des caches.</strong></p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="connexion-sans-etat" tabindex="-1"><a class="header-anchor" href="#connexion-sans-etat"><span><span style="color:#5497B4;"><strong>Connexion sans état</strong></span></span></a></h4><p>Le serveur ne doit pas s’encombrer du <em>contexte</em> de l’interaction. Ce contexte est rappelé à chaque requête par le client, et les modifications de contexte sont indiquées dans la réponse.</p><p>=&gt; auto-suffisance des messages</p><p><strong>Inconvénients</strong></p><ul><li>surcoût en bande passante</li><li>authentification à chaque requête (→ HTTPS)</li></ul><p><strong>Avantages</strong></p><ul><li>performances (un serveur / beaucoup de clients)</li><li>robustesse (redémarrage ou changement de serveur, <strong>clients nomades</strong>)</li><li>facilite le travail des intermédiaires</li></ul><h4 id="interface-uniforme" tabindex="-1"><a class="header-anchor" href="#interface-uniforme"><span><span style="color:#5497B4;"><strong>Interface uniforme</strong></span></span></a></h4><h5 id="_1-ressources" tabindex="-1"><a class="header-anchor" href="#_1-ressources"><span>(1): ressources</span></a></h5><ul><li>Une ressource est un constituant du service (ex : médecin, créneau horaire, rendez-vous, patient). <ul><li>Une collection de ressource est aussi une ressource.</li></ul></li><li>Toute ressource est identifiée par une URL. <ul><li>Réciproquement, deux URLs différentes identifient (a priori) des ressources différentes.</li></ul></li><li>Une ressource a un état interne (données stockées sur le serveur) <ul><li>qui varie dans le temps,</li><li>et qui est inaccessible aux clients.</li></ul></li></ul><h5 id="_2-representation" tabindex="-1"><a class="header-anchor" href="#_2-representation"><span>(2): représentation</span></a></h5><p>Une ressource n’est manipulée par le client qu’à travers des représentations de son état.</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="_3-messages-auto-suffisants" tabindex="-1"><a class="header-anchor" href="#_3-messages-auto-suffisants"><span>(3): messages auto-suffisants</span></a></h5><ul><li>La sémantique de la requête est entièrement portée par le message : <ul><li>verbe (GET, PUT, POST, DELETE)</li><li>URL cible</li><li>en-têtes éventuels</li><li>représentation éventuelle</li></ul></li><li>Très lié à Système en couches et Connexion sans état.</li></ul><h5 id="_4-hypermedia" tabindex="-1"><a class="header-anchor" href="#_4-hypermedia"><span>(4): hypermédia</span></a></h5><p><span style="color:#000000;">Hypertext As The Engine Of Application State (HATEOAS)</span></p><p><span style="color:#000000;">Notion </span> <span style="color:#000000;">d’affordance</span></p><p><span style="color:#3E4349;">La représentation d’une ressource comporte les liens vers d’autres ressources (identifiées par leurs </span> <span style="color:#3E4349;">URIs</span> <span style="color:#3E4349;">).</span></p><p><span style="color:#3E4349;">La sémantique du lien dépend du format de la représentation.</span></p><p><span style="color:#3E4349;">L’état d’un client change en suivant les liens découvert dans les représentations.</span></p><p><span style="color:#3E4349;"><strong>NB :</strong></span> <span style="color:#3E4349;"> Une alternative consiste à construire un URI en fonction des informations fournies par une représentation. C’est le cas des formulaires HTML utilisant la méthode GET, </span> <span style="color:#3E4349;">e.g.:</span> <span style="color:#222222;">http</span> <span style="color:#222222;">😕/www.google.fr/search?q=hypertexte</span></p><h4 id="code-a-la-demande-optionnel" tabindex="-1"><a class="header-anchor" href="#code-a-la-demande-optionnel"><span><span style="color:#5497B4;"><strong>Code à la demande (optionnel)</strong></span></span></a></h4><p><span style="color:#3E4349;">Cette contrainte consiste à permettre au serveur d’envoyer au client non seulement la description d’un état, mais également une logique de traitement (programme).</span></p><p><span style="color:#3E4349;">On peut voir AJAX (</span> <span style="color:#3E4349;">Asynchronous</span> <span style="color:#3E4349;"> Javascript and XML) et ses dérivés (JSON) comme une généralisation de ce principe (même si AJAX n’utilise pas forcément des échanges RESTful).</span></p><h2 id="rest-en-pratique" tabindex="-1"><a class="header-anchor" href="#rest-en-pratique"><span>REST en pratique</span></a></h2><div class="hint-container info"><p class="hint-container-title">Citation</p><p>La théorie, c &#39;est quand on sait tout et que rien ne fonctionne...<br> La pratique, c &#39;est quand tout fonctionne et que personne ne sait pourquoi...</p></div><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="approche-orientee-ressource" tabindex="-1"><a class="header-anchor" href="#approche-orientee-ressource"><span><span style="color:#5497B4;"><strong>Approche orientée-ressource</strong></span></span></a></h3><div class="hint-container info"><p class="hint-container-title">Important</p><p>En REST, la responsabilité du serveur est de gérer et d’exposer des <strong>ressources</strong></p></div><p>…Et c’est tout (pas l’interaction avec le client).</p><h4 id="les-ressources" tabindex="-1"><a class="header-anchor" href="#les-ressources"><span>Les ressources</span></a></h4><ul><li>Symbolisent des objets du domaine <ul><li>Peuvent correspondre à des entités en base ou être virtuelles</li><li>Sont identifiées par des noms (pas des verbes) (Plus proche de l’orienté-objet)</li></ul></li><li>Sont exposées par leurs <strong>URL</strong></li><li>Sont échangées sous forme de <strong>représentations</strong> (éventuellement partielles)</li></ul><h4 id="comment-travailler-en-oriente-ressource" tabindex="-1"><a class="header-anchor" href="#comment-travailler-en-oriente-ressource"><span>Comment travailler en orienté-ressource</span></a></h4><ol><li><strong>Concevoir un modèle de ressources arborescent</strong></li></ol>',75),X=e("li",null,[t("Deux sortes de ressources "),e("ul",null,[e("li",null,"Instance (objet métier)"),e("li",null,"Collection d’instances")])],-1),V={href:"https://fr.wikipedia.org/wiki/GRASP_(programmation)",target:"_blank",rel:"noopener noreferrer"},K=e("li",null,[t("Les cas d’utilisations de l’application se rapportent à l’__état __ interne de ces ressources "),e("ul",null,[e("li",null,"Opérations similaires à du CRUD"),e("li",null,"Opérations métier")])],-1),Z=e("ol",{start:"2"},[e("li",null,[e("strong",null,"Définir les URL qui permettent d’accéder aux ressources"),e("br"),t(" Théoriquement, en REST, la forme des URL est libre si elles identifient une ressource de façon unique (d’où le nom)")])],-1),Y=e("p",null,[e("strong",null,"Exemples")],-1),$={href:"https://talenthub.dev/search",target:"_blank",rel:"noopener noreferrer"},ee={href:"https://talehub.dev/search/users/TH001",target:"_blank",rel:"noopener noreferrer"},te={class:"hint-container info"},se=e("p",{class:"hint-container-title"},"Bonnes pratiques",-1),ne=e("li",null,"Faire apparaître le type et le nom de la ressource adressée",-1),re={href:"https://talehub.dev/search/users/TH001",target:"_blank",rel:"noopener noreferrer"},ie=r(`<p><strong>Remarque</strong> : l’état interne des ressources n’est pas accessible au client</p><ol start="3"><li><strong>Spécifier les transferts de représentations d’états des ressources entre le client et le serveur pour chaque cas d’utilisation de l’application</strong></li></ol><ul><li>Identifier l’ensemble des propriétés qui décrivent utilement l’état de la ressource <ul><li>souvent sérialisés sous forme de paires clés valeurs</li></ul></li><li>Déterminer un/des format(s) de données pour les transactions HTTP <ul><li>Rappel : en MVC, une vue est une représentation des données, quel qu’en soit le format</li></ul></li></ul><h3 id="transactions-sans-etat" tabindex="-1"><a class="header-anchor" href="#transactions-sans-etat"><span><span style="color:#5497B4;"><strong>Transactions sans état</strong></span></span></a></h3><div class="hint-container info"><p class="hint-container-title">Important</p><p>En REST, le client a la responsabilité de gérer le contexte de l’interaction avec le serveur<br> Le serveur ne conserve aucune trace des interactions passées<br></p></div><p>La connexion est dite <strong>sans état</strong> (<strong>stateless</strong>). C’est le client qui maintient ses « variables de session »</p><p>🡆 Il transmet dans la requête le contexte nécessaire pour la traiter</p><p>En éliminant la gestion des sessions par le serveur ↪️ on élimine un goulot d’étranglement<br> ↪️ on économise des ressources<br></p><div class="hint-container tip"><p class="hint-container-title">Avantages</p><ul><li>Gain en performances et en scalabilité</li><li>Maintenance et évolution facilitées</li></ul></div><ul><li><p><strong>Identifier les éléments contextuels dont le serveur a besoin pour fonctionner</strong></p><ul><li><span style="color:#000000;">qui seraient des attributs de session en «</span> <span style="color:#000000;">stateful</span> <span style="color:#000000;">»</span></li><li><span style="color:#000000;">différents des paramètres de la requête (ne changent pas à chaque requête)</span></li><li><span style="color:#000000;">différents des identifiants des ressources</span></li><li><span style="color:#000000;">différents des données de configuration de l’application</span></li></ul></li><li><p><strong>Passer le contexte dans la requête</strong></p><ul><li>En paramètres : en fonction de la méthode HTTP</li><li>Dans l’URL<div class="language-markdown" data-ext="md" data-title="md"><pre class="language-markdown"><code>https://www.qwant.com/?q=test&amp;t=web
https://api.qwant.com/api/search/web?count=10&amp;q=test&amp;t=web&amp;device=tablet&amp;safesearch=1&amp;locale=fr_FR&amp;uiv=4
</code></pre></div></li><li>Dans le corps de la requête<div class="language-markdown" data-ext="md" data-title="md"><pre class="language-markdown"><code>  {&quot;query&quot;:&quot;test&quot;,&quot;language&quot;:&quot;francais&quot;,&quot;pl&quot;:&quot;extff&quot;,&quot;lui&quot;:&quot;francais&quot;}
</code></pre></div></li><li>Dans les headers HTTP <ul><li>Authorization</li><li>Cookies ( stateless , mais pas restful)</li></ul></li></ul></li><li><p><strong>3. Récupérer le contexte côté serveur</strong></p><ul><li>Authentification, autorisation <ul><li>Filtres</li></ul></li><li>Informations nécessaires au traitement de la requête <ul><li>Contrôleur</li><li>Quel type de MVC choisir ? Pull based ou push based ?</li></ul></li></ul></li><li><p><strong>4. Traiter la requête en interrogeant la bonne instance du modèle</strong></p></li></ul><p>Les bonnes pratiques sont :</p>`,11),le=r("<li><strong>Version :</strong> à la racine de l’arbre (pas nécessairement du serveur)</li><li><strong>Chemins</strong><ul><li>Utiliser des noms pluriels pour les collections</li><li>Utiliser des id d’instances comme sous-ressources des collections</li><li>Séparer les éléments par des slashs («/»)</li><li>Pas de slash final</li></ul></li><li><strong>Paramètres : filtres, tri, pagination</strong><br><strong>Exemples</strong><ul><li>https://talenthub.dev/api/v3/users/toto/friends/1</li><li>https://talenthub.dev/api/v3/messages?author=toto&amp;sort=+title,-index</li><li>https://talenthub.dev/api/v3/messages?offset=100&amp;limit=25</li></ul></li>",3),oe=e("strong",null,"URL pour les requêtes de CU «opérationnels»",-1),ae=e("li",null,"Utiliser un verbe",-1),pe=e("br",null,null,-1),ce=e("strong",null,"Exemples",-1),ue={href:"https://talenthub.dev/api/v3/users/toto/friends/1/users/login",target:"_blank",rel:"noopener noreferrer"},de={href:"https://talenthub.dev/api/v3/users/toto/friends/1/users/toto/playlist/play",target:"_blank",rel:"noopener noreferrer"},he=r('<h3 id="utilisation-avancee-de-http" tabindex="-1"><a class="header-anchor" href="#utilisation-avancee-de-http"><span><span style="color:#5497B4;"><strong>Utilisation avancée de HTTP</strong></span></span></a></h3><h4 id="historique-des-specifications-ietf" tabindex="-1"><a class="header-anchor" href="#historique-des-specifications-ietf"><span>Historique des spécifications IETF</span></a></h4><p><strong>Juin 1999</strong></p><ul><li><span style="color:#00A2D5;">RFC 2616</span> <span style="color:#000000;">: contient tout HTTP 1.1</span></li></ul><p><strong>Juin 2014</strong></p><ul><li><span style="color:#00A2D5;">RFC 7230</span> <span style="color:#000000;">: Message </span> <span style="color:#000000;">Syntaxand</span> <span style="color:#000000;"></span> <span style="color:#000000;">Routing</span></li><li><span style="color:#00A2D5;">RFC 7231</span> <span style="color:#000000;">: </span> <span style="color:#000000;">Semanticsand</span> <span style="color:#000000;"> Content</span></li><li><span style="color:#00A2D5;">RFC 7232</span> <span style="color:#000000;">: </span> <span style="color:#000000;">ConditionalRequests</span></li><li><span style="color:#00A2D5;">RFC 7233</span> <span style="color:#000000;">: Range </span> <span style="color:#000000;">Requests</span></li><li><span style="color:#00A2D5;">RFC 7234</span> <span style="color:#000000;">: </span> <span style="color:#000000;">Caching</span></li><li><span style="color:#00A2D5;">RFC 7235</span> <span style="color:#000000;">: </span> <span style="color:#000000;">Authentication</span></li></ul><p>Roy Fielding est éditeur en chef de toutes ces spécifications</p><h4 id="rappel-verbes-http" tabindex="-1"><a class="header-anchor" href="#rappel-verbes-http"><span>Rappel : verbes HTTP</span></a></h4><p><strong>Sémantique des méthodes</strong></p><p>Source : <span style="color:#00A3D6;"><em>RFC 7231</em></span></p><p>Il existe une correspondance entre le CRUD (Create Update Delete) et les verbes HTTP<br></p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="correspondance-avec-crud" tabindex="-1"><a class="header-anchor" href="#correspondance-avec-crud"><span>Correspondance avec CRUD</span></a></h4><ul><li>Remarques sur la sémantique des verbes HTTP</li><li><strong>POST</strong> est officiellement définie comme <strong>cachable</strong></li><li>Sous réserve d’existence de certaines directives de cache</li><li>Dans le cas d’une réponse 200 OK&lt;</li><li>mais très rarement implémenté</li><li><span style="color:#000000;"><strong>Contenu de réponse</strong></span></li><li><span style="color:#000000;">Seule GET a pour sémantique d’obtenir un contenu dans la réponse</span></li><li><span style="color:#000000;">POST, PUT, DELETE visent à modifier le serveur ; un contenu dans la réponse n’est en général pas nécessaire</span></li></ul><h4 id="codes-de-statut-d-erreur" tabindex="-1"><a class="header-anchor" href="#codes-de-statut-d-erreur"><span>Codes de statut / d’erreur</span></a></h4><ul><li><p><span style="color:#000000;">Bonnes pratiques pour les codes de statut (succès)</span></p><ul><li><span style="color:#000000;"><strong>Renvoi d’un contenu :</strong></span></li><li><span style="color:#000000;">200 </span> <span style="color:#000000;">OKou</span> <span style="color:#000000;"> 206 Partial Content</span></li><li><span style="color:#000000;"><strong>Création d’une ressource :</strong></span></li><li><span style="color:#000000;">201 </span> <span style="color:#000000;">Created</span> <span style="color:#000000;">+ lien vers la ressource dans le header Location</span></li><li><span style="color:#000000;"><strong>Modification d’une ressource :</strong></span></li><li><span style="color:#000000;">200 OK+ représentation, si nécessaire</span></li><li><span style="color:#000000;">204 No Content, sinon</span></li><li><span style="color:#000000;"> __Suppression d’une ressource : __ </span></li><li><span style="color:#000000;">204 No Content</span></li></ul></li><li><p><span style="color:#000000;">Ne pas hésiter à séparer les opérations des CU et renvoyer des codes de succès sans contenu. </span></p><ul><li><span style="color:#000000;"><strong>Réactualisation d’une ressource :</strong></span></li><li><span style="color:#000000;">304 Not </span> <span style="color:#000000;">Modified</span> <span style="color:#000000;">: le client peut réutiliser la dernière version renvoyée par le serveur (redirection vers le cache)</span></li><li><span style="color:#000000;">204 No Content: le client n’a pas besoin de modifier l’affichage, puisqu’aucun (nouveau) contenu ne provient du serveur</span></li><li><span style="color:#000000;"><strong>Erreurs d’authentification / d’autorisation</strong></span></li><li><span style="color:#000000;">401 </span> <span style="color:#000000;">Unauthorized</span> <span style="color:#000000;">: erreur d’authentification</span></li><li><span style="color:#000000;">403 </span> <span style="color:#000000;">Forbidden</span> <span style="color:#000000;">: erreur d’autorisation (malgré une authentification possiblement correcte)</span></li></ul></li></ul><p><span style="color:#5497B4;"> &quot;Although caching is an entirely OPTIONAL feature of HTTP, it can be assumed that reusing a cached response__ is desirable and that such reuse is the default behavior when no requirement or local configuration prevents it.“– From RFC7234</span></p><h4 id="gestion-du-cache-rfc7234" tabindex="-1"><a class="header-anchor" href="#gestion-du-cache-rfc7234"><span>Gestion du cache (<span style="color:#00A2D5;"><strong>RFC7234</strong></span>)</span></a></h4><ul><li>Spécifie le comportement des composants finaux et intermédiaires</li><li>Rappel : la méthode HTTP utilisée doit être cachable</li><li>Notions de <span style="color:#00A2D5;">Freshness</span>, d’<span style="color:#00A2D5;">âge</span>, de <span style="color:#00A2D5;">Staleresponse</span> (périmée)</li><li>Headers : <span style="color:#00A2D5;">Age</span> , <span style="color:#00A2D5;">Cache-Control</span> , <span style="color:#00A2D5;">Expires</span> , <span style="color:#00A2D5;">Warning</span></li><li>Fonctionnement : 2 techniques (<span style="color:#00A2D5;">requêtes conditionnelles</span><ul><li><span style="color:#00A2D5;">Last-Modified</span> ➡️ headers de requête : <span style="color:#00A2D5;">If-Modified-Since</span> , <span style="color:#00A2D5;">If-Unmodified-Since</span>, <span style="color:#00A2D5;">If-Range</span></li><li><span style="color:#00A2D5;">Etag</span> (entitytag) ➡️ headers de requête :<span style="color:#00A2D5;">If-Match</span> , <span style="color:#00A2D5;">If-None-Match</span></li></ul></li><li>Codes de réponse : <span style="color:#00A2D5;">304 Not </span> <span style="color:#00A2D5;">Modified</span>,<span style="color:#00A2D5;">412 </span> <span style="color:#00A2D5;">PreconditionFailed</span> (voir <span style="color:#00A2D5;">Validators</span>)</li></ul><h4 id="negociation-de-contenus" tabindex="-1"><a class="header-anchor" href="#negociation-de-contenus"><span>Négociation de contenus</span></a></h4><p><span style="color:#5497B4;">When responses convey payload information, whether indicating a success or an error, the origin server often has different ways of representing that information;for example, in different formats, languages , or encoding” – from RFC7231 </span></p><p>Rappel : client et serveur échangent des représentations de ressources<br></p><p>La négociation de contenus permet au serveur de renvoyer une représentation de ressource en fonction des préférences du client</p><p>2 façons pour le client d’exprimer ses préférences:</p><ul><li>Headers HTTP</li><li>Extension dans l’URL</li></ul><p>Remarque : dans ce cas, on spécifie uniquement le format de sérialisation</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Envoi du <span style="color:#00A2D5;">media type</span>(ex. MIME types) dans la réponse</p><table><thead><tr><th style="text-align:center;">Simple</th><th style="text-align:center;">Content-Type:</th><th style="text-align:center;">application/json</th></tr></thead><tbody><tr><td style="text-align:center;">Suffixe de sous-type</td><td style="text-align:center;">Content-Type:</td><td style="text-align:center;">application/ld+json</td></tr><tr><td style="text-align:center;">Sous-type « Vendor »</td><td style="text-align:center;">Content-Type:</td><td style="text-align:center;">application/vnd.ms-excel</td></tr><tr><td style="text-align:center;">Sous-type « Personal or vanity »</td><td style="text-align:center;">Content-Type:</td><td style="text-align:center;">audio/prs.sid</td></tr><tr><td style="text-align:center;">Sous-type « unregistered »</td><td style="text-align:center;">Content-Type:</td><td style="text-align:center;">application/x.foo</td></tr><tr><td style="text-align:center;">Paramètres</td><td style="text-align:center;">Content-Type:</td><td style="text-align:center;">text/html; charset=utf-8</td></tr></tbody></table><p><strong>Syntaxe générale</strong>: type / subtype + [.suffix] [; parameters]</p><p>Plusieurs patterns de négociation dans la spec</p><ul><li>Proactive Negotiation : une seule transaction HTTP <ul><li>Requête : headers Accept *</li><li>Réponse : headers Content*</li></ul></li><li>Reactive Negotiation : 2 transactions <ul><li>Réponse vide avec code : 300 Multiple Choices / 406 Not Acceptable -&gt; liste de choix</li><li>Nouvelle requête avec sélection parmi les propositions</li><li>Autres : Conditional content , Active content, Transparent Content Negotiation …</li></ul></li></ul><p>Concrètement :</p><ul><li>Laisser le client exprimer ses préférences (ou pas) dans la requête initiale</li><li>Correctement implémenter la négociation proactive</li><li>Prévoir la négociation réactive en fallback (406 Not Acceptable)</li></ul><h4 id="deploiement-independant-des-composants-1" tabindex="-1"><a class="header-anchor" href="#deploiement-independant-des-composants-1"><span>Déploiement indépendant des composants</span></a></h4><ul><li>Rappel : «scalabilité anarchique»</li><li>Principe : pouvoir rajouter un composant de façon «transparente» pour l’application</li><li>Fait appel à d’autres contraintes <ul><li>Composant terminal : serveur transactions sans état</li><li>Composant terminal : client interface uniforme</li><li>Composant intermédiaire : proxy, firewall, cache,loadbalancer… client-serveur, cache <ul><li>Messages auto-descriptifs (interprétables par les intermédiaires)</li><li>Prise en compte des composants intermédiaires par HTTP <ul><li>Codes de retour (305 Use Proxy, 502 Bad Gateway)</li><li>Directives de cache (no-store)</li></ul></li><li>Certains composants se comportent à la fois comme un client et comme un serveur</li></ul></li></ul></li><li>Séparation des préoccupations entre les 2 rôles</li></ul><h4 id="cas-des-cookies" tabindex="-1"><a class="header-anchor" href="#cas-des-cookies"><span>Cas des cookies</span></a></h4><ul><li><strong>Cookies de session</strong><ul><li>Contiennent uniquement un identifiant ; les données de session sont conservées côté serveur</li><li>violent le principe de Connexion sans état</li></ul></li><li><strong>Cookies contenant explicitement les «données de session»</strong><ul><li>Stateless, car les données sont bien envoyées dans la requête</li><li>Pas RESTful car le client n’est pas libre de choisir l’état de l’interaction (c’est le serveur qui impose la valeur des cookies)</li></ul></li><li><strong>Remarque :</strong> les cookies changent <em>a posteriori</em> la sémantique des requêtes précédemment effectuées</li><li>=&gt;« cassent » le bouton back et certains mécanismes de cache</li></ul><div class="hint-container warning"><p class="hint-container-title">ATTENTION</p><p><strong>À proscrire en REST</strong></p></div><h3 id="authentification-sans-etat" tabindex="-1"><a class="header-anchor" href="#authentification-sans-etat"><span><span style="color:#5497B4;"><strong>Authentification sans état</strong></span></span></a></h3><p><strong>Rappel : la gestion des sessions</strong></p><p>Permet au serveur de « se rappeler » d’un utilisateur</p><ul><li>Données de profil</li><li>Traces d’interaction</li><li>...</li></ul><p>Techniquement</p><ul><li>Le client n’envoie qu’un identifiant <ul><li>Cookie</li><li>Token dans l’URL</li><li>Champ caché de formulaire</li></ul></li><li>Le serveur maintient les données associées à cet identifiant : Ex (en Java) : Map</li></ul><p><strong>Avantages</strong></p><ul><li>Données protégées (côté serveur)</li><li>Bande passante réseau</li></ul><p><strong>Inconvénients</strong></p><ul><li>Le client n’a pas accès à ses propres données</li><li>Scalabilité <ul><li>Ressources consommées côté serveur</li><li>Goulot d’étranglement</li></ul></li></ul><p><strong>Comment faire pour</strong></p><ul><li>Transférer au client la responsabilité de gérer ses données</li><li>Satisfaire les contraintes fonctionnelles (sécurité, scalabilité...)</li></ul><p><strong>Rappel : messages auto-descptifs</strong></p><p>Le client envoie le contexte de l’interaction avec chaque requête, y compris l’authentification.</p><p><strong>Problème:</strong> On ne peut pas demander à l’utilisateur de retaper ses identifiants à chaque requête Stocker son login et son mot de passe côté client</p><p><strong>Solution</strong> L’utilisateur / l’agent s’identifie une fois Le serveur lui renvoie un token d’authentification Le client renvoie ce token à chaque requête ultérieure Le serveur vérifie qu’il s’agit bien de l’utilisateur en validant le token</p><table><thead><tr><th style="text-align:center;">Stateful</th><th style="text-align:center;">Stateless</th></tr></thead><tbody><tr><td style="text-align:center;">Le token est une clé pour accéder aux variables de session</td><td style="text-align:center;">Le token ne permet que la validation de l’identité de l’utilisateur</td></tr><tr><td style="text-align:center;">Il est généré par le serveur, la seule restriction est qu’il soit unique <br>Il doit être conservé côté serveur et côté client</td><td style="text-align:center;">Il est obtenu par chiffrement des informations d’authentification de l’utilisateur<br>Il suffit d’avoir la clé pour déchiffrer le token et valider l’authentification</td></tr><tr><td style="text-align:center;"><strong>Le serveur gère la session</strong> : La session peut être invalidée par le serveur</td><td style="text-align:center;"><strong>Le token a une durée de vie fixe</strong><br>Le serveur ne peut pas invalider la session</td></tr><tr><td style="text-align:center;"><strong>Difficile de « partager » ce mécanisme entre plusieurs serveurs</strong><br>Il faut aussi déléguer toute la gestion des données de session</td><td style="text-align:center;">La gestion de l’authentification peut facilement être confiée à un tiers <br>Exemples : SSO, CAS</td></tr></tbody></table><p><strong>Stateless</strong></p><table><thead><tr><th style="text-align:left;"><strong>Inconvénients</strong></th><th style="text-align:left;"><strong>Avantages</strong></th></tr></thead><tbody><tr><td style="text-align:left;">Protection de la clé<br>Aucun contrôle sur :<br>- La révocation de session<br>- La véracité / fraîcheur des données de session<br>Implémentation plus lourde<br>Surtout pour un seul serveur<br></td><td style="text-align:left;">Peu de mémoire consommée côté serveur<br>Scalabilité: Pour l&#39;ajout d’un serveur, il suffit de lui partager la clé<br>Externalisation:<br>- Single-Sign On (SSO)<br>-Se loguer avec son compte Google ou Facebook...<br>-Mécanismes d’authentification génériques (CAS, Oauth)<br></td></tr></tbody></table><h4 id="authentification-en-http-rfc-7235" tabindex="-1"><a class="header-anchor" href="#authentification-en-http-rfc-7235"><span>Authentification en HTTP (<span style="color:#00A2D5;">RFC 7235</span>)</span></a></h4><p><strong>Requête à un serveur</strong></p><ul><li>En-tête <strong>Authorization</strong> :Indique une demande d’authentification du client au serveur</li><li><strong>Contenu</strong><ul><li>Type d’authentification</li><li>Credentials : Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</li></ul></li></ul><p><strong>Requête à un proxy</strong></p><ul><li>En-tête <strong>Proxy-Authorization</strong></li><li>Contenu : identique</li></ul><p><strong>Réponse du serveur</strong></p><ul><li>Code d’erreur : <strong>401 Unauthorized</strong><ul><li>En-tête <strong>WWW-Authenticate</strong></li><li><span style="color:#8B7A6F;">P</span> <span style="color:#000000;">ermet à un serveur d’indiquer au client comment accéder à une ressource</span></li><li><span style="color:#000000;"><strong>Contenu</strong></span></li><li>Type d’authentification (scheme)</li><li>Realm, charset… (facultatifs)</li></ul></li></ul><p><strong>Réponse du proxy</strong></p><ul><li>Code d’erreur : <strong>407 Proxy AuthenticationRequired</strong><ul><li>En-tête : Proxy-Authenticate</li><li>Contenu : identique</li></ul></li></ul><h4 id="types-d-authentification-en-http-methodes-les-plus-classiques" tabindex="-1"><a class="header-anchor" href="#types-d-authentification-en-http-methodes-les-plus-classiques"><span><strong>Types d’authentification en HTTP (Méthodes les plus classiques)</strong></span></a></h4><table><thead><tr><th style="text-align:center;">Scheme</th><th style="text-align:center;">Spec</th><th style="text-align:center;">Description</th></tr></thead><tbody><tr><td style="text-align:center;">Basic</td><td style="text-align:center;">rRFC76i7l</td><td style="text-align:center;">Syntaxe = userid password ; encodé en base64</td></tr><tr><td style="text-align:center;">Bearer</td><td style="text-align:center;">rRFC675Ql</td><td style="text-align:center;">Token (voir plus loin)</td></tr><tr><td style="text-align:center;">Digest</td><td style="text-align:center;">[RFC7616I</td><td style="text-align:center;">Proche de Basic, mais le serveur indique au client comment formuler et chiffrer les credentials</td></tr><tr><td style="text-align:center;">OAuth</td><td style="text-align:center;">[RFC584Q, Section 3.5.1I</td><td style="text-align:center;">Utilise le protocole Oauth (voir plus loin)</td></tr></tbody></table>',71),ge={id:"json-web-token-jwt",tabindex:"-1"},me={class:"header-anchor",href:"#json-web-token-jwt"},fe={href:"https://jwt.io/",target:"_blank",rel:"noopener noreferrer"},be=e("p",null,"Il est constitué :",-1),_e=e("ul",null,[e("li",null,"D'un header"),e("li",null,"D'un payload"),e("li",null,"D'une signature")],-1),ye=e("p",null,[e("span",{style:{color:"#FF0000"}},"Header")],-1),ve=e("ul",null,[e("li",null,"Objet JSON : Identifie l’algo de chiffrement de la signature")],-1),xe=e("p",null,[e("span",{style:{color:"#FF00FF"}},"Payload")],-1),Te={href:"https://tools.ietf.org/html/rfc7519%23section-4",target:"_blank",rel:"noopener noreferrer"},Ae=e("ul",null,[e("li",null,"Données d’authentification"),e("li",null,"Ou autres")],-1),Se=r('<p><span style="color:#00B0F0;">Signature</span></p><ul><li>Avec une clé symétrique (HMAC)</li><li>Avec une clé asymétrique (RSA ou ECDSA)</li></ul><p><strong>Exemple de token :</strong></p><figure><img src="'+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="oauth2" tabindex="-1"><a class="header-anchor" href="#oauth2"><span><strong>OAuth2</strong></span></a></h4><ul><li>RFC6749(core) et RFC8252(Native Apps)</li><li>Protocole d’authentification et de délégation d’authentification (SSO) <ul><li>4 scénarios (granttypes)</li><li>Plusieurs types de cibles (webappscôté serveur, Single-Page-Applications, desktop, mobile…)</li></ul></li><li>Standardisé et largement utilisé <ul><li>Google</li><li>Facebook</li><li>…</li></ul></li><li>Nombreuses implémentation disponibles</li><li>Open source</li></ul><h3 id="hypermedia-as-the-engine-of-application-state-hateoas" tabindex="-1"><a class="header-anchor" href="#hypermedia-as-the-engine-of-application-state-hateoas"><span><span style="color:#5497B4;"><strong>Hypermedia As The Engine of Application State - HATEOAS</strong></span></span></a></h3>',7),qe={class:"hint-container info"},Re=e("p",{class:"hint-container-title"},"Info",-1),ke={href:"https://restfulapi.net/hateoas/",target:"_blank",rel:"noopener noreferrer"},Ee={href:"https://fr.wikipedia.org/wiki/URL",target:"_blank",rel:"noopener noreferrer"},Pe={href:"https://fr.wikipedia.org/wiki/Ressource_du_World_Wide_Web",target:"_blank",rel:"noopener noreferrer"},we={href:"https://fr.wikipedia.org/wiki/Type_de_m%C3%A9dias",target:"_blank",rel:"noopener noreferrer"},Ce={href:"https://fr.wikipedia.org/wiki/HATEOAS#cite_note-The_RESTful_CookBook-1",target:"_blank",rel:"noopener noreferrer"},Ie=e("strong",null,"account",-1),Le={href:"https://fr.wikipedia.org/wiki/Extensible_Markup_Language",target:"_blank",rel:"noopener noreferrer"},We=r('<figure><img src="'+R+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><span style="color:#202122;">La réponse contient les liens suivants:</span> <span style="color:#202122;"><strong>deposit</strong></span> <span style="color:#202122;"> (effectuer un dépôt), </span> <span style="color:#202122;"><strong>withdraw</strong></span> <span style="color:#202122;"> (effectuer un retrait), </span> <span style="color:#202122;"><strong>transfer</strong></span> <span style="color:#202122;"> (effectuer un transfert), ou </span> <span style="color:#202122;"><strong>close</strong></span> <span style="color:#202122;"> (clôturer le compte).</span></p><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><span style="color:#202122;">Lorsque les informations du compte sont récupérées ultérieurement, le compte est à découvert :</span></p><p><span style="color:#202122;">Maintenant un seul lien est disponible : </span> <span style="color:#202122;"><strong>deposit</strong></span> <span style="color:#202122;">. Dans son état actuel, les autres liens ne sont pas disponibles. D&#39;où le </span> <span style="color:#5497B4;"><em>EOAS</em></span> <span style="color:#202122;"> de </span> <span style="color:#202122;"><strong>HATEOAS</strong></span> <span style="color:#202122;">, pour </span> <span style="color:#202122;"><em>Engine of Application State</em></span> <span style="color:#202122;"> : </span></p><p><span style="color:#5497B4;"><strong>Les actions possibles varient en fonction de l&#39;état de la ressource.</strong></span></p><p><span style="color:#202122;">Un client n&#39;a pas besoin de comprendre tous les types de médias et mécanismes de communication offerts par le serveur. La capacité de comprendre les nouveaux types de médias peut être acquise au moment de l&#39;exécution grâce au &quot;code à la demande&quot; fourni au client par le serveur.</span></p><h2 id="web-api-s" tabindex="-1"><a class="header-anchor" href="#web-api-s"><span>Web API&#39;s</span></a></h2><div class="hint-container info"><p class="hint-container-title">Citation</p><p>&quot;La théorie, c&#39;est quand on sait tout et que rien ne fonctionne.<br> La pratique, c &#39;est quand tout fonctionne et que personne ne sait pourquoi.<br> Ici, nous avons réuni théorie et pratique :<br> Rien ne fonctionne... et personne ne sait pourquoi !&quot;</p></div><h3 id="le-tout-mis-ensemble" tabindex="-1"><a class="header-anchor" href="#le-tout-mis-ensemble"><span><span style="color:#5497B4;">Le tout mis ensemble</span></span></a></h3><p>REST fournit des principes pour :</p><ul><li>Alléger les serveurs</li><li>Permettre l’évolution des clients ➡️ Réduire le couplage entre serveur et client</li></ul><p>On peut donc réaliser des applications</p><ul><li>En exposant des ressources sur un serveur</li><li>En documentant l’API du serveur Web</li><li>En réalisant le client séparément <ul><li>En JavaScript pour les navigateurs</li><li>Sous forme d’applications desktop ou mobile</li><li>Sur un autre serveur qui « consomme » les ressources du premier</li><li>Sur des composants intermédiaires qui exposent / filtrent / transforment ces données</li></ul></li></ul><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="d-ailleurs-a-t-on-encore-besoin-de-clients" tabindex="-1"><a class="header-anchor" href="#d-ailleurs-a-t-on-encore-besoin-de-clients"><span><span style="color:#5497B4;"> D’ailleurs, a-t-on encore besoin de clients ?</span></span></a></h3><p>Le modèle du Web s’est construit sur la mise à disposition <em>worldwide</em> de</p><ul><li>Documents (pour les humains)</li><li>Données (pour les geeks et les machines)</li><li>Services et Ressources (pour les machines)</li></ul><p>Rappel de la notion d’affordance</p><ul><li>Permet de déduire comment on se sert de quelque chose, mais pas pourquoi</li></ul><p>Les objectifs des tâches réalisés par les clients sont rarement ceux prévus par les concepteurs des serveurs</p><p><strong>Chacun son boulot</strong></p><p>Les serveurs Web exposent les ressources dont ils disposent et les API pour les utiliser. Les clients utilisent ces API pour proposer aux utilisateurs des applications Web (ou pas) répondant au mieux à leurs besoins</p><p>Un serveur expose une <strong>Web API</strong></p><ul><li>Sous la forme d’un ensemble de ressources RESTful</li><li>Avec un point d’entrée unique (URL de base)</li><li>Avec sa documentation permettant <ul><li>De comprendre comment elle s’utilise</li><li>De naviguer entre les ressources (HATEOAS)</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">Info</p><p>Ceci est la caractéristique d&#39;une Web API</p></div><p>Un client peut</p><ul><li>Consommer une Web API</li><li>En agréger ( <strong>mashup</strong> ) plusieurs</li></ul><h3 id="acces-aux-web-api-s" tabindex="-1"><a class="header-anchor" href="#acces-aux-web-api-s"><span><span style="color:#5497B4;"> Accès aux Web API’s </span></span></a></h3>',30),De=r("<li><strong>Sur le Web de documents, deux stratégies d’accès à l’information</strong></li><li>Navigation : liens dans les pages</li><li>Requêtage: moteurs de recherche</li><li><strong>Même problématique pour les Web APIs</strong></li><li>Navigation <ul><li>Liens dans les APIs documentées connues</li><li>Liens rencontrés pendant l’utilisation d’une Web API <ul><li>Headers HTTP : Link …</li><li>Redirections : 303 SeeOther…</li></ul></li></ul></li>",5),Be={href:"https://apislist.com/",target:"_blank",rel:"noopener noreferrer"},He=e("li",null,[e("strong",null,"Remarque")],-1),je=e("li",null,"Toutes les APIs exposées sur le Web ne sont pas totalement RESTful",-1),Ue=e("h3",{id:"developper-une-web-api",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#developper-une-web-api"},[e("span",null,[e("span",{style:{color:"#5497B4"}},[e("strong",null,"Développer une Web API")])])])],-1),Me=e("p",null,"Nombreux outils et frameworks orientés-ressources",-1),Fe=e("p",null,"En Java",-1),Oe={href:"https://jcp.org/en/jsr/detail?id=311",target:"_blank",rel:"noopener noreferrer"},Ne=e("p",null,"Définit principalement un ensemble d’annotations pour faciliter le développement en REST",-1),ze=e("p",null,"• @Path, @PathParam, @QueryParam",-1),Je=e("p",null,"• @GET,@POST,@DELETE,@PUT, @HEAD",-1),Ge=e("p",null,"• ©Produces,©Consumes",-1),Qe={href:"https://cxf.apache.org/",target:"_blank",rel:"noopener noreferrer"},Xe={style:{color:"#0000FF"}},Ve={href:"https://projects.eclipse.org/projects/ee4j.jersey/",target:"_blank",rel:"noopener noreferrer"},Ke={href:"https://projects.eclipse.org/projects/ee4j.jersey/",target:"_blank",rel:"noopener noreferrer"},Ze={style:{color:"#0000FF"}},Ye={href:"http://tomee.apache.org/tomcat-jaxrs.html",target:"_blank",rel:"noopener noreferrer"},$e={href:"http://tomee.apache.org/tomcat-jaxrs.html",target:"_blank",rel:"noopener noreferrer"},et=e("h3",{id:"outils-d-aide-au-developpement",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#outils-d-aide-au-developpement"},[e("span",null,[e("span",{style:{color:"#5497B4"}},[e("strong",null,"Outils d’aide au développement")])])])],-1),tt=e("li",null,[e("strong",null,"Développer / débugger"),e("ul",null,[e("li",null,"Côté serveur : utilisez le débugger de votre IDE"),e("li",null,"Côté client : F12 (Outils de développement)")])],-1),st=e("strong",null,"Documenter / tester une API",-1),nt={href:"https://swagger.io/",target:"_blank",rel:"noopener noreferrer"},rt={href:"https://editor.swagger.io/",target:"_blank",rel:"noopener noreferrer"},it=e("strong",null,"Tester / scénariser",-1),lt={href:"https://www.soapui.org/",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://www.getpostman.com/",target:"_blank",rel:"noopener noreferrer"},at=r('<h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p><span style="color:#5497B4;"><strong>REST, le modèle philosophique du Web ?</strong></span></p><p><strong>Un style architectural</strong></p><ul><li>en accord avec la structure distribuée et l’échelle du Web</li><li>pour la conception de services applicatifs sur le Web</li></ul><p><strong>Un ensemble de bonne pratiques</strong></p><ul><li>Principes de conception</li><li>Design patterns (RESTful, RESTlike, RESTafarian...)</li></ul><p><span style="color:#5497B4;"><strong>Retour sur la notion d’application Web</strong></span></p><p><strong>Augmentation de la bande passante</strong></p><p>Toute l’information nécessaire au traitement de la requête doit « voyager » dedans</p><p><strong>Nécessite des clients « intelligents »</strong></p><p>Mécanismes d’authentification plus lourds</p><p><strong>Quid des données internes au serveur ?</strong></p><p><strong>Sémantique déclarative __ <em>vs.</em> __ opérationnelle</strong></p><p><span style="color:#5497B4;"><strong>REST a aussi des inconvénients</strong></span></p><p>Manque d’un langage d’un standard de description d’interfaces</p>',15),pt=e("li",null,[e("strong",null,"Fonctionnalités"),e("ul",null,[e("li",null,"vérification automatique de la conformité"),e("li",null,"génération automatique de code (squelettes, stubs)"),e("li",null,"configuration automatique")])],-1),ct=e("li",null,[e("strong",null,"De nombreuses propositions...")],-1),ut={style:{color:"#5497B4"}},dt={href:"http://www.w3.org/TR/wsdl20/",target:"_blank",rel:"noopener noreferrer"},ht={style:{color:"#5497B4"}},gt={href:"http://www.w3.org/TR/wsdl20/",target:"_blank",rel:"noopener noreferrer"},mt=e("span",{style:{color:"#5497B4"}},"(2003)",-1),ft={style:{color:"#5497B4"}},bt={href:"http://knoesis.org/research/srl/projects/hRESTs/",target:"_blank",rel:"noopener noreferrer"},_t={style:{color:"#5497B4"}},yt={href:"http://knoesis.org/research/srl/projects/hRESTs/",target:"_blank",rel:"noopener noreferrer"},vt=e("span",{style:{color:"#5497B4"}},"et",-1),xt={style:{color:"#5497B4"}},Tt={href:"http://www.w3.org/Submission/SA-REST/",target:"_blank",rel:"noopener noreferrer"},At={style:{color:"#5497B4"}},St={href:"http://www.w3.org/Submission/SA-REST/",target:"_blank",rel:"noopener noreferrer"},qt=e("span",{style:{color:"#5497B4"}}," (2007-2008)",-1),Rt={style:{color:"#5497B4"}},kt={href:"http://www.w3.org/Submission/wadl/",target:"_blank",rel:"noopener noreferrer"},Et=e("span",{style:{color:"#5497B4"}}," (2009)",-1),Pt={style:{color:"#5497B4"}},wt={href:"http://hydra-cg.com/",target:"_blank",rel:"noopener noreferrer"},Ct={style:{color:"#5497B4"}},It={href:"http://hydra-cg.com/",target:"_blank",rel:"noopener noreferrer"},Lt=e("span",{style:{color:"#5497B4"}},"(2012)",-1),Wt={style:{color:"#5497B4"}},Dt={href:"https://swagger.io/resources/open-api/",target:"_blank",rel:"noopener noreferrer"},Bt={style:{color:"#5497B4"}},Ht={href:"https://swagger.io/resources/open-api/",target:"_blank",rel:"noopener noreferrer"},jt={style:{color:"#5497B4"}},Ut={href:"https://swagger.io/resources/open-api/",target:"_blank",rel:"noopener noreferrer"},Mt=e("span",{style:{color:"#5497B4"}},"(V1 : 2015, V3 : février 2020)",-1),Ft=e("li",null,[e("span",{style:{color:"#998700"}}),t(" Mais aucune ne s’est encore complètement imposée.")],-1),Ot=r('<p><span style="color:#5497B4;"><strong>Retour sur la notion d’application Web</strong></span></p><p><strong>Définition précédente</strong></p><p>Application dont l’interface est visible dans un navigateur</p><p><strong>Comment catégoriser les Web APIs ?</strong></p><p>(meilleure) utilisation des standards du Web Pas de client Web / pas de client du tout (Mais pas des applications)</p><p><strong>Les Web APIs</strong> ne constituent pas des applications Web à part entière</p><p>Modules d’applications Web</p><p>À intégrer dans la démarche de conception d’une application client</p><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>Références</span></a></h2><p><strong>Grands principes</strong></p>',10),Nt={href:"https://perso.liris.cnrs.fr/pierre-antoine.champin/enseignement/rest/",target:"_blank",rel:"noopener noreferrer"},zt={href:"https://www.crummy.com/writing/speaking/2008-QCon/act3.html",target:"_blank",rel:"noopener noreferrer"},Jt={href:"https://martinfowler.com/articles/richardsonMaturityModel.html",target:"_blank",rel:"noopener noreferrer"},Gt=e("p",null,[e("strong",null,"Avancé")],-1),Qt={href:"https://fr.slideshare.net/AniruddhBhilvare/an-introduction-to-rest-api",target:"_blank",rel:"noopener noreferrer"},Xt={href:"https://fr.slideshare.net/stormpath/rest-jsonapis",target:"_blank",rel:"noopener noreferrer"},Vt=e("p",null,[e("strong",null,"URI / URL")],-1),Kt={href:"https://restfulapi.net/resource-naming/",target:"_blank",rel:"noopener noreferrer"},Zt=e("p",null,[e("strong",null,"Négociation de contenus / media types")],-1),Yt={href:"https://restfulapi.net/content-negotiation/",target:"_blank",rel:"noopener noreferrer"},$t={href:"https://akrabat.com/restful-apis-and-media-types/",target:"_blank",rel:"noopener noreferrer"},es={href:"http://amundsen.com/media-types/",target:"_blank",rel:"noopener noreferrer"},ts={href:"https://json-schema.org/latest/json-schema-core.html",target:"_blank",rel:"noopener noreferrer"},ss=e("p",null,[e("strong",null,"Authentification")],-1),ns={href:"https://medium.com/@kennch/stateful-and-stateless-authentication-10aa3e3d4986",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://aaronparecki.com/oauth-2-simplified/",target:"_blank",rel:"noopener noreferrer"},is={href:"https://zestedesavoir.com/articles/1616/comprendre-oauth-2-0-par-lexemple/",target:"_blank",rel:"noopener noreferrer"},ls=e("p",null,[e("strong",null,"Méthodes HTTP")],-1),os={href:"https://ruben.verborgh.org/blog/2012/09/27/the-object-resource-impedance-mismatch/",target:"_blank",rel:"noopener noreferrer"},as=e("p",null,[e("strong",null,"Web APIs")],-1),ps={href:"https://rubenverborgh.github.io/WebFundamentals/web-apis/",target:"_blank",rel:"noopener noreferrer"},cs={href:"https://www.programmableweb.com/",target:"_blank",rel:"noopener noreferrer"},us={href:"http://spec.openapis.org/oas/v3.0.3",target:"_blank",rel:"noopener noreferrer"},ds=e("p",null,[e("strong",null,"JAX-RS")],-1),hs={href:"https://jcp.org/en/jsr/detail?id=311",target:"_blank",rel:"noopener noreferrer"},gs={href:"https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services",target:"_blank",rel:"noopener noreferrer"},ms={href:"http://tomee.apache.org/tomcat-jaxrs.html",target:"_blank",rel:"noopener noreferrer"};function fs(bs,_s){const s=l("ExternalLinkIcon");return o(),a("div",null,[C,e("p",null,[t("Largement tiré du "),e("a",I,[t("billet de blog de Martin Fowler"),n(s)])]),L,W,D,e("p",null,[t("Source :"),e("a",B,[t("https://architecturelogicielle.wordpress.com/2013/04/25/le-modele-de-maturite-de-richardson/"),n(s)])]),H,e("p",null,[t("Notion proposée par Roy Fielding dans "),e("a",j,[t("sa thèse"),n(s)]),t(" (2000) "),U,t(" . "),M,t(" Il définit un ensemble de "),F,t(" imposées sur la conception d’un système pour garantir un certain nombre de "),O,t("."),N]),z,J,e("p",null,[e("a",G,[t("Traduction française"),n(s)])]),Q,e("ul",null,[X,e("li",null,[t("Les ressources «portent» les cas d’utilisation "),e("ul",null,[e("li",null,[t("Patterns "),e("a",V,[t("GRASP"),n(s)])])])]),K]),Z,Y,e("ul",null,[e("li",null,[e("a",$,[t("https://talenthub.dev/search"),n(s)])]),e("li",null,[e("a",ee,[t("https://talehub.dev/search/users/TH001"),n(s)])])]),e("div",te,[se,e("ul",null,[ne,e("li",null,[t("Refléter la hiérarchie de ressources "),e("a",re,[t("https://"),n(s)])])])]),ie,e("ul",null,[le,e("li",null,[oe,e("ul",null,[ae,e("li",null,[t("Raccrocher le CU à l’URL de la ressource à laquelle se rapporte le CU"),pe,ce,e("ul",null,[e("li",null,[e("a",ue,[t("https://talenthub.dev/api/v3/users/toto/friends/1/users/login"),n(s)])]),e("li",null,[e("a",de,[t("https://talenthub.dev/api/v3/users/toto/friends/1/users/toto/playlist/play"),n(s)])])])])])])]),he,e("h4",ge,[e("a",me,[e("span",null,[e("a",fe,[t("JSON Web Token"),n(s)]),t(" (JWT)")])])]),be,_e,ye,ve,xe,e("ul",null,[e("li",null,[t("Objet JSON : Contient des « "),e("a",Te,[t("claims"),n(s)]),t("» "),Ae])]),Se,e("div",qe,[Re,e("p",null,[t('"This architectural style lets you use hypermedia links in the response contents so that the client can dynamically navigate to the appropriate resource by traversing the hypermedia links. This is conceptually the same as a web user navigating through web pages by clicking the appropriate hyperlinks in order to achieve a final goal." - '),e("a",ke,[t("restfulapi.net"),n(s)])])]),e("p",null,[t("Un client REST accède à une application REST à l'aide d'une simple "),e("a",Ee,[t("URL"),n(s)]),t(" fixe. Toutes les futures actions que le client peut entreprendre sont découvertes dans les représentations de la "),e("a",Pe,[t("ressource"),n(s)]),t(" retournée par le serveur. Les "),e("a",we,[t("types de médias"),n(s)]),t(" utilisés pour ces représentations, et les relations de liens qu'ils peuvent contenir, sont normalisés. Le client passe d'un état d'application à l'autre en sélectionnant des liens à l'intérieur d'une représentation ou en manipulant la représentation par d'autres moyens offerts par son type de média. De cette façon, l'interaction RESTful est pilotée par l'hypermédia, plutôt que par des informations hors bande.")]),e("p",null,[t("Dans "),e("a",Ce,[t("l'exemple"),n(s)]),t(", cette requête GET récupère une ressource "),Ie,t(" , demandant des détails dans une représentation "),e("a",Le,[t("XML"),n(s)])]),We,e("ul",null,[De,e("li",null,[t("Requêtage: "),e("a",Be,[t("https://apislist.com/"),n(s)])]),He,je]),Ue,Me,Fe,e("p",null,[e("a",Oe,[t("JSR311"),n(s)]),t(" : Java API for RESTful Web Services (JAX-RS)")]),Ne,ze,Je,Ge,e("p",null,[t("Implémentations : "),e("a",Qe,[t("Apache CXF"),n(s)]),t(", "),e("span",Xe,[e("a",Ve,[n(s)])]),t(),e("a",Ke,[t("Jersey"),n(s)]),t(", "),e("span",Ze,[e("a",Ye,[n(s)])]),t(),e("a",$e,[t("TomEE+"),n(s)]),t("...")]),et,e("ul",null,[tt,e("li",null,[st,e("ul",null,[e("li",null,[e("a",nt,[t("https://swagger.io"),n(s)])]),e("li",null,[e("a",rt,[t("https://editor.swagger.io"),n(s)])])])]),e("li",null,[it,e("ul",null,[e("li",null,[e("a",lt,[t("https://www.soapui.org"),n(s)])]),e("li",null,[e("a",ot,[t("https://www.getpostman.com"),n(s)])])])])]),at,e("ul",null,[pt,ct,e("li",null,[e("span",ut,[e("em",null,[e("a",dt,[t("WSDL 2.0"),n(s)])])]),t(),e("span",ht,[e("a",gt,[n(s)])]),t(),mt]),e("li",null,[e("span",ft,[e("em",null,[e("a",bt,[t("hRESTS"),n(s)])])]),t(),e("span",_t,[e("a",yt,[n(s)])]),t(),vt,t(),e("span",xt,[e("a",Tt,[n(s)])]),t(),e("span",At,[e("em",null,[e("a",St,[t("SA-REST"),n(s)])])]),t(),qt]),e("li",null,[e("span",Rt,[e("em",null,[e("a",kt,[t("WADL"),n(s)])])]),t(),Et]),e("li",null,[e("span",Pt,[e("em",null,[e("a",wt,[t("HYDRA"),n(s)])])]),t(),e("span",Ct,[e("a",It,[n(s)])]),t(),Lt]),e("li",null,[e("span",Wt,[e("em",null,[e("a",Dt,[t("OpenAPI "),n(s)])])]),t(),e("span",Bt,[e("em",null,[e("a",Ht,[t("Specification"),n(s)])])]),t(),e("span",jt,[e("a",Ut,[n(s)])]),t(),Mt]),Ft]),Ot,e("ul",null,[e("li",null,[e("a",Nt,[t("https://perso.liris.cnrs.fr/pierre-antoine.champin/enseignement/rest/"),n(s)])]),e("li",null,[e("a",zt,[t("https://www.crummy.com/writing/speaking/2008-QCon/act3.html"),n(s)])]),e("li",null,[e("a",Jt,[t("https://martinfowler.com/articles/richardsonMaturityModel.html"),n(s)])])]),Gt,e("ul",null,[e("li",null,[e("a",Qt,[t("https://fr.slideshare.net/AniruddhBhilvare/an-introduction-to-rest-api"),n(s)])]),e("li",null,[e("a",Xt,[t("https://fr.slideshare.net/stormpath/rest-jsonapis"),n(s)])])]),Vt,e("ul",null,[e("li",null,[e("a",Kt,[t("https://restfulapi.net/resource-naming/"),n(s)])])]),Zt,e("ul",null,[e("li",null,[e("a",Yt,[t("https://restfulapi.net/content-negotiation/"),n(s)])]),e("li",null,[e("a",$t,[t("https://akrabat.com/restful-apis-and-media-types/"),n(s)])]),e("li",null,[e("a",es,[t("http://amundsen.com/media-types/"),n(s)])]),e("li",null,[e("a",ts,[t("https://json-schema.org/latest/json-schema-core.html"),n(s)])])]),ss,e("ul",null,[e("li",null,[e("a",ns,[t("https://medium.com/@kennch/stateful-and-stateless-authentication-10aa3e3d4986"),n(s)])]),e("li",null,[e("a",rs,[t("https://aaronparecki.com/oauth-2-simplified/"),n(s)])]),e("li",null,[e("a",is,[t("https://zestedesavoir.com/articles/1616/comprendre-oauth-2-0-par-lexemple/"),n(s)])])]),ls,e("ul",null,[e("li",null,[e("a",os,[t("https://ruben.verborgh.org/blog/2012/09/27/the-object-resource-impedance-mismatch"),n(s)])])]),as,e("ul",null,[e("li",null,[e("a",ps,[t("https://rubenverborgh.github.io/WebFundamentals/web-apis/"),n(s)])]),e("li",null,[e("a",cs,[t("https://www.programmableweb.com/"),n(s)])]),e("li",null,[e("a",us,[t("http://spec.openapis.org/oas/v3.0.3"),n(s)])])]),ds,e("ul",null,[e("li",null,[e("a",hs,[t("https://jcp.org/en/jsr/detail?id=3ii"),n(s)])]),e("li",null,[e("a",gs,[t("https://en.wikipedia.org/wiki/Java "),n(s)])]),e("li",null,[e("a",ms,[t("http: //tomee.apache.org/tomcat-jaxrs.html"),n(s)])])])])}const xs=i(w,[["render",fs],["__file","session05.html.vue"]]),Ts=JSON.parse(`{"path":"/courses/session05.html","title":"L'architecture logicelle REST et les Web API's","lang":"en-US","frontmatter":{"title":"L'architecture logicelle REST et les Web API's","pageInfo":false,"order":6,"date":"2023-01-01T00:00:00.000Z","sticky":true,"star":true,"copyright":false,"footer":"Talent HUB | Copyright © 2024","lastUpdated":false,"contributors":false,"description":"REST et Web API’s Le cours est disponible ICI Approche projet Introduction REST en théorie REST en pratique Web APIs Conclusion Questions Introduction Avant : les Services Web É...","head":[["meta",{"property":"og:url","content":"https://docs.talenthub.dev/courses/session05.html"}],["meta",{"property":"og:title","content":"L'architecture logicelle REST et les Web API's"}],["meta",{"property":"og:description","content":"REST et Web API’s Le cours est disponible ICI Approche projet Introduction REST en théorie REST en pratique Web APIs Conclusion Questions Introduction Avant : les Services Web É..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-02T16:25:13.000Z"}],["meta",{"property":"article:author","content":"Talent HUB Team"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-02T16:25:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"L'architecture logicelle REST et les Web API's\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-02T16:25:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Talent HUB Team\\",\\"url\\":\\"https://talenthub.dev\\"}]}"]]},"headers":[{"level":2,"title":"Approche projet","slug":"approche-projet","link":"#approche-projet","children":[]},{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[{"level":3,"title":"Avant : les Services Web","slug":"avant-les-services-web","link":"#avant-les-services-web","children":[]},{"level":3,"title":"Caractéristiques d’un service Web","slug":"caracteristiques-d-un-service-web","link":"#caracteristiques-d-un-service-web","children":[]},{"level":3,"title":"Les services Web : au final","slug":"les-services-web-au-final","link":"#les-services-web-au-final","children":[]}]},{"level":2,"title":"REST, en théorie","slug":"rest-en-theorie","link":"#rest-en-theorie","children":[{"level":3,"title":"Modèle de maturité de Richardson","slug":"modele-de-maturite-de-richardson","link":"#modele-de-maturite-de-richardson","children":[]},{"level":3,"title":"Style architectural","slug":"style-architectural","link":"#style-architectural","children":[]},{"level":3,"title":"Objectifs","slug":"objectifs","link":"#objectifs","children":[]},{"level":3,"title":"Contraintes","slug":"contraintes","link":"#contraintes","children":[]}]},{"level":2,"title":"REST en pratique","slug":"rest-en-pratique","link":"#rest-en-pratique","children":[{"level":3,"title":"Approche orientée-ressource","slug":"approche-orientee-ressource","link":"#approche-orientee-ressource","children":[]},{"level":3,"title":"Transactions sans état","slug":"transactions-sans-etat","link":"#transactions-sans-etat","children":[]},{"level":3,"title":"Utilisation avancée de HTTP","slug":"utilisation-avancee-de-http","link":"#utilisation-avancee-de-http","children":[]},{"level":3,"title":"Authentification sans état","slug":"authentification-sans-etat","link":"#authentification-sans-etat","children":[]},{"level":3,"title":"Hypermedia As The Engine of Application State - HATEOAS","slug":"hypermedia-as-the-engine-of-application-state-hateoas","link":"#hypermedia-as-the-engine-of-application-state-hateoas","children":[]}]},{"level":2,"title":"Web API's","slug":"web-api-s","link":"#web-api-s","children":[{"level":3,"title":"Le tout mis ensemble","slug":"le-tout-mis-ensemble","link":"#le-tout-mis-ensemble","children":[]},{"level":3,"title":"D’ailleurs, a-t-on encore besoin de clients ?","slug":"d-ailleurs-a-t-on-encore-besoin-de-clients","link":"#d-ailleurs-a-t-on-encore-besoin-de-clients","children":[]},{"level":3,"title":"Accès aux Web API’s","slug":"acces-aux-web-api-s","link":"#acces-aux-web-api-s","children":[]},{"level":3,"title":"Développer une Web API","slug":"developper-une-web-api","link":"#developper-une-web-api","children":[]},{"level":3,"title":"Outils d’aide au développement","slug":"outils-d-aide-au-developpement","link":"#outils-d-aide-au-developpement","children":[]}]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]},{"level":2,"title":"Références","slug":"references","link":"#references","children":[]}],"git":{"createdTime":1713451211000,"updatedTime":1717345513000,"contributors":[{"name":"Lionel Leiva-Marcon","email":"llm@d-flow.fr","commits":6}]},"readingTime":{"minutes":20.04,"words":6013},"filePathRelative":"courses/session05.md","localizedDate":"January 1, 2023","autoDesc":true}`);export{xs as comp,Ts as data};
